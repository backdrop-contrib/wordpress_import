<?php
/* $Id$ */
/*	
  Wordpress Import Drupal module : Import a Wordpress WXR file into Drupal
  Copyright (C) 2007 Yann Rocq <yann@rocq.net> - http://www.rocq.net/yann/

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */

/**
 * Implementation of hook_help()
 */

function wordpress_import_help($section='') {
  $output = '';

  switch ($section) {
    case "admin/help#wordpress_import":
    $output = '<p>'.  t("This module import a WXR file generated by Worpdress blog software into Drupal"). '</p>';
    break;
  }

  return $output;
}

/**
 * Implementation of hook_menu()
 */

function wordpress_import_menu() {
  global $user;
  $items = array();

  $items[] = array(
    'path' => 'admin/content/wordpress_import',
    'title' => t('Wordpress import'),
    'description' => t('Import Wordpress WXR file'),
    'callback' => 'wordpress_import_home',
    'access' => ($user->uid == 1),
    'type' => MENU_NORMAL_ITEM
    );

  return $items;
}

/**
 * Implementation of hook_form()
 */

function wordpress_import_form($form_values=NULL)
{
  // This is a multistep form
  
  if (!isset($form_values)) {
    $step = 1;
  }
  else {
    $step = $form_values['step'] + 1;
  }

  $form['step'] = array(
    '#type' => 'hidden',
    '#value' => $step,
  );

  switch ($step)
  {
    // Step 1 : Upload form
    
    case 1:
    unset($_SESSION['wordpress_import']);
    $form['informations'] = array(
      '#value' => t('This module will import a WXR file generated by Wordpress. You MUST make a backup copy of your Drupal Database before proceeding')
    );
    $form['upload'] = array(
      '#type' => 'file',
    '#title' => t('Upload your WXR file'),
    '#size' => 40
    );
    break;
    
    // Step 2 : Options setting
    
    case 2:
    $wordpress = wordpress_import_items($_SESSION['wordpress_import']['file_path']);
    $users = wordpress_import_get_users($wordpress);

    // Users mapping

    $form['users_map'] = array(
      '#title' => t('Users mapping'),
    '#type' => 'fieldset',
    '#description' => t('Map each wordpress user to a drupal user'),
    '#collapsible' => TRUE,
    '#tree' => TRUE
    );

    foreach ($users as $users_value)
    {
      $form['users_map'][$users_value] = array(
        '#type' => 'select',
      '#title' => $users_value,
      '#options' => wordpress_import_drupal_users_list()
      );
    }


    // Options

    $form['options'] = array(
      '#type' => 'fieldset',
    '#title' => t('Options'),
    '#collapsible' => TRUE
    );

    $form['options']['alias'] = array(
      '#type' => 'checkbox',
    '#title' => 'Create path aliases',
    '#description' => t('This option try to preserve the path of the wordpress original posts. It is useful only if the url of your drupal site root is the same as the worpdress site (!root) and if clean urls are activated', array('!root' => $wordpress['link']))
    );
    break;

    case 3:
    $form['submit'] = array('#value' => t('The Wordpress blog has been successfully imported'));
    break;
  }

  // Form settings
  
  if ($step < 3)
  {
    $form['submit'] = array('#type' => 'submit', '#value' => t('Next'));
  }
  
  $form['#attributes']['enctype'] = 'multipart/form-data';
  $form['#multistep'] = TRUE;
  $form['#redirect'] = FALSE;
  
  return $form;
}

/**
 * Implementation of hook_validate()
 */

function wordpress_import_form_validate($form_id, $form_values)
{
  switch ($form_values['step']) {
    case 1:
    if (!file_check_upload())
    {
      form_set_error('upload', t('You must provide a WXR file.'));
    }
    break;
  }
}

/**
 * Implementation of hook_submit()
 */

function wordpress_import_form_submit($form_id, $form_values)
{
  switch ($form_values['step']) {
    // Step 1 : upload file
    case '1':
    $wordpress_path = file_create_path('wordpress');
    file_check_directory($wordpress_path,TRUE);
    $file_info = file_save_upload('upload', $wordpress_path.'/import.xml');
    $_SESSION['wordpress_import']['file_path'] = $file_info->filepath;
    break;

    // Step 2 : import blog
    
    case 2:
      $_SESSION['wordpress_import']['users_map'] = $form_values['users_map'];
      $_SESSION['wordpress_import']['alias'] = $form_values['alias'];

    wordpress_import_import_blog($_SESSION['wordpress_import']);
    break;
  }
}

/**
 * Display Wordpress import form
 */

function wordpress_import_home()
{
  $output = drupal_get_form('wordpress_import_form');
  return $output;
}

/**
 * Import blog
 * @param array $params parameters
 */

function wordpress_import_import_blog($params)
{
  $wordpress = wordpress_import_items($params['file_path']);
  $params = array_merge($params,  wordpress_import_import_categories($wordpress));
  $params['tags_vocabulary'] = wordpress_import_create_tags_vocabulary();
  wordpress_import_posts($wordpress, $params);
}

/**
 * Import categories
 * @param array $wordpress wordpress data
 * @return array categories mapping and taxonomy id
 */

function wordpress_import_import_categories($wordpress)
{
  // Create new taxonomy for wordpress categories
  
  $category_vocabulary = array(
    'name' => t('Wordpress category'),
    'hierarchy' => 2,
    'nodes' => array('page' => 'page', 'story' => 'story') // TODO: Adapt to chosen types
  );

  taxonomy_save_vocabulary($category_vocabulary);

  // Import categories

  foreach ($wordpress['categories'] as $key => $value) {
    $category_name = wordpress_import_get_tag($value, 'wp:cat_name');
    $category_parent = wordpress_import_get_tag($value, 'wp:category_parent');
    $category_term = array(
      'name' => $category_name,
      'vid' => $category_vocabulary['vid']
      );

    taxonomy_save_term($category_term);

    // Save mapping between Wordpress and Drupal categories

    $category_mapping[$category_name] = $category_term['tid'];
  }

  return array (
    'categories_map' => $category_mapping,
    'categories_vocabulary' => $category_vocabulary['vid']
    );
}

/**
 * Create taxonomy for tags
 * @return integer new taxonomy id
 */

function wordpress_import_create_tags_vocabulary()
{
  $tag_vocabulary = array(
    'name' => t('Wordpress tag'),
    'tags' => 1,
    'nodes' => array('page' => 'page', 'story' => 'story') // TODO: Adapt to chosen types
  );

  taxonomy_save_vocabulary($tag_vocabulary);

  return $tag_vocabulary['vid'];
}

/**
 * Import posts and create clean urls if required
 * @param array $wordpress wordpress data
 * @param array $params parameters
 */

function wordpress_import_posts($wordpress, $params)
{
  $params['format'] = wordpress_import_create_format();
  
  foreach ($wordpress['posts'] as $post_value) {
    $post_info = wordpress_import_post($post_value, $params);

    if ($post_info && $params['alias'])
    {
      $link = wordpress_import_get_tag($post_value, 'link');
      $link = substr($link,strlen($wordpress['link']));
      $link = rtrim($link,'/');
      path_set_alias('node/'.$post_info['nid'], $link);
    }
  }
}

/**
 * Import a post
 * @param array $post post data
 * @param array $params parameters
 * @return array post infos
 */

function wordpress_import_post($post, $params)
{
  $uid = $params['users_map'][wordpress_import_get_tag( $post, 'dc:creator' )];

  // Don't import the post if the user hasn't been selected

  if(!$uid)
    return FALSE;
    
  // Get post type : blog entry (post) or page
  // Posts are promoted in front page but not the pages
  
  $post_type = wordpress_import_get_tag($post,'wp:post_type');

  switch ($post_type)
  {
    case 'post':
    $type = 'story';
    $promote = '1';
    break;
    case 'page':
    $type = 'page';
    $promote = '0';
    break;
    default:
    return;
  }

  // Parsing categories
  // TODO : support multilevel categories

  preg_match_all('|<category>(.*?)</category>|is', $post, $categories);
  $categories = $categories[1];

  foreach ($categories as $key => $value) {
    $category = str_replace(array ('<![CDATA[', ']]>'), '', $value);
    $drupal_category = $params['categories_map'][$category];

    if (!empty($drupal_category)) {
      if (is_array($drupal_category))
      {
        $drupal_categories[$params['categories_vocabulary']] = $drupal_categories;
      }
      else
      {
        $drupal_categories[$params['categories_vocabulary']] = array($drupal_category);
      }
    }
    else
    {
      $drupal_tags[] = $category;
    }
  }

  // Parsing tags

  preg_match_all('|<category domain=\"tag\">(.*?)</category>|is', $post, $tags);

  $tags=$tags[1];

  foreach ($tags as $key => $value) {
    $drupal_tags[] = str_replace(array ('<![CDATA[', ']]>'), '', $value);
  }

  if(is_array($drupal_tags))
  {
    $drupal_categories['tags'][$params['tags_vocabulary']] = join(',', $drupal_tags);
  }
  
  // Defining status
  
  switch (wordpress_import_get_tag($post,'wp:status'))
  {
    case 'draft':
    case 'private':
      $status = FALSE;
    break;
    default:
      $status = TRUE;
  } 

  // Inserting node

  $node = array(
    'type' => $type,
    'teaser' => wordpress_import_get_tag($post,'content:encoded'),
    'uid' => $uid,
    'title' => html_entity_decode(wordpress_import_get_tag($post,'title'), ENT_COMPAT, 'UTF-8'),
    'body' => wordpress_import_get_tag($post,'content:encoded'),
    'format' => $params['format'],
    'status' => $status,
    'promote' => $promote,
    'created' => strtotime(wordpress_import_get_tag($post,'wp:post_date')),
    'comment' => wordpress_import_get_tag($post,'wp:comment_status')=='open'?COMMENT_NODE_READ_WRITE:COMMENT_NODE_READ_ONLY,
    'taxonomy'=> $drupal_categories
    );

  $node = (object)$node;
  node_save($node);
  $return['nid'] = $node->nid;

  // Importing comments

  $drupal_comment = array();
  preg_match_all('|<wp:comment>(.*?)</wp:comment>|is', $post, $comments);
  $comments = $comments[1];

  $comment_id = 0;

  foreach ($comments as $comment_key => $comment)
  {	
    switch(wordpress_import_get_tag($comment,'wp:comment_approved'))
    {
      case '0':
      $status = COMMENT_NOT_PUBLISHED;
      break;
      case '1':
      $status = COMMENT_PUBLISHED;
      break;
      case 'spam':
      continue 2;
    }

    $timestamp = strtotime(wordpress_import_get_tag($comment,'wp:comment_date'));
    $comment_content = wordpress_import_get_tag($comment,'wp:comment_content');

    $drupal_comment[$timestamp] = array(
      'nid' => $node->nid,
      'pid' => 0,
      'comment' => $comment_content,
      'subject' => trim(truncate_utf8(decode_entities(strip_tags($comment_content)), 29, TRUE)),
      'name' => decode_entities(strip_tags(wordpress_import_get_tag($comment,'wp:comment_author'))),
      'mail' => wordpress_import_get_tag($comment,'wp:comment_author_email'),
      'homepage' => wordpress_import_get_tag($comment,'wp:comment_author_url'),
      'timestamp' => $timestamp,
      'hostname' => wordpress_import_get_tag($comment,'wp:comment_author_IP'),
      'status' => $status,
      'format' => $param['format']
      );
  }

  // Sorting comments by timestamp so the thread won't be messed up in Drupal

  ksort($drupal_comment);

  // Saving comments

  foreach ($drupal_comment as $drupal_comment_key => $drupal_comment_value)
  {
    $comment_id = comment_save($drupal_comment_value);

    // Updating fields that haven't been set by comment_save

    db_query("UPDATE {comments} SET hostname= '%s', timestamp= '%d', status= '%d' WHERE cid= %d", $drupal_comment_value['hostname'], $drupal_comment_value['timestamp'], $drupal_comment_value['status'], $comment_id);
  }

  return $return;
}

// Drupal help functions

 /**
  * 
  */

function wordpress_import_directory()
{
  return file_create_path(file_directory_path().'/'.'wordpress');
}

/**
 * Get list of users for the import form
 * @return array users
 */

function wordpress_import_drupal_users_list()
{
  $sql = "SELECT * FROM {users}";
  $result =  db_query($sql);

  $users[0] = t('Do not import');

  while ($user = db_fetch_array($result))
  {
    if (!empty($user['uid']))
    {
      $users[$user['uid']] = $user['name'];
    }
  }
  return $users;
}

 /**
  * Create an input format for wordpress or fetch an existing one.
  * @return integer format id
  */

function wordpress_import_create_format()
{
  $filter_name = 'Wordpress';
  $result = db_fetch_object(db_query("SELECT format FROM {filter_formats} WHERE name='%s'", $filter_name));
  if ($result) {
    $format = $result->format;
  }
  else
  {
    db_query("INSERT INTO {filter_formats} (name,cache) VALUES ('%s',1)", $filter_name);
    $format = db_result(db_query("SELECT MAX(format) AS format FROM {filter_formats}"));
    db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", $format, 'filter', 2, 0);
  }

  return $format;
}

// Wordpress importing functions
// Adapted from wordpress code (http://wordpress.org/) released under GNU GENERAL PUBLIC LICENSE

 /**
  * Parse a WXR file into an array
  * @param string $file file path
  * @return array wordpress data
  */

function wordpress_import_items($file)
{
  $wordpress = array();

  $fp = fopen($file, 'r');
  if ($fp) {
    while ( !feof($fp) ) {
      $importline = rtrim(fgets($fp));
      if ( false !== strpos($importline, '<wp:category>') ) {
        preg_match('|<wp:category>(.*?)</wp:category>|is', $importline, $category);
        $wordpress['categories'][] = $category[1];
        continue;
      }
      if ( false !== strpos($importline, '<wp:tag>') ) {
        preg_match('|<wp:tag>(.*?)</wp:tag>|is', $importline, $tag);
        $wordpress['tags'][] = $tag[1];
        continue;
      }
      if ( false !== strpos($importline, '<item>') ) {
        $wordpress['posts'][$num] = '';
        $doing_entry = true;
        continue;
      }
      if ( false !== strpos($importline, '</item>') ) 
      {
        $num++;
        $doing_entry = false;
        continue;
      }
      
      if ( $doing_entry ) {
        $wordpress['posts'][$num] .= $importline . "\n";
      }
      else
      {
        if ( false !== strpos($importline, '<link>') ) {
          preg_match('|<link>(.*?)</link>|is', $importline, $link);
          $wordpress['link'] = $link[1];
          if (substr($wordpress['link'],-1) != '/')
          {
            $wordpress['link'] .= '/';
          }
        }
      }
    }
    fclose($fp);
  }

  return $wordpress;
}

/**
 * Import author from wordpress data
 *
 * @param array $wordpress wordpress data
 * @return array author list
 */


function wordpress_import_get_users($wordpress)
{
  $temp = array();

  foreach ($wordpress['posts'] as $post) {
    if ('' != trim($post)) {
      ++ $i;
      $author_name = wordpress_import_get_tag( $post, 'dc:creator' );
      $author[$author_name] = $author_name;
    }
  }

  return $author;
}

/**
 * Extract data from a xml tag
 *
 * @param string $string xml snippet
 * @param string $tag tag to extract
 * @return string content of the tag
 */

function wordpress_import_get_tag($string, $tag)
{
  preg_match("|<$tag.*?>(.*?)</$tag>|is", $string, $return);
  $return = preg_replace('|^<!\[CDATA\[(.*)\]\]>$|s', '$1', $return[1]);
  // $return = $wpdb->escape( trim( $return ) );
  // TODO : echapper le tag
  return $return;
}